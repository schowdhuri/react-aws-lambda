{"version":3,"sources":["client/store/index.js","client/utils/history.ts","client/reducers/loading.ts","constants/actions.ts","client/reducers/todos.ts","client/reducers/index.ts","client/actions/index.ts","client/utils/awsLambda.ts","client/sagas/deleteTodo.ts","client/sagas/getTodos.ts","client/sagas/saveTodo.ts","client/sagas/updateTodo.ts","client/sagas/index.ts","client/components/CreateTodo.tsx","client/selectors/index.ts","client/components/TodoList.tsx","client/components/App.tsx","client/index.tsx"],"names":["composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createBrowserHistory","initialState","id","status","index","state","action","type","findIndex","taskId","slice","value","item","createRootReducer","history","combineReducers","router","connectRouter","loading","todos","setLoading","updateTodoSuccess","AWS","config","region","credentials","CognitoIdentityCredentials","IdentityPoolId","Lambda","deleteTodo","invoke","data","Promise","resolve","reject","lambda","FunctionName","InvocationType","LogType","Payload","err","console","log","payload","JSON","parse","ex","put","call","stringify","response","error","text","takeEvery","getTodos","Items","saveTodo","updateTodo","all","Form","styled","form","TextBox","input","AddButton","button","CreateTodo","useState","name","setName","dispatch","useDispatch","createTodo","completed","onSubmit","ev","preventDefault","onChange","target","placeholder","onClick","className","List","ul","Item","li","Checkbox","label","props","ItemName","div","ItemActions","DeleteButton","TodoList","useSelector","useEffect","changeCompleted","map","key","reducer","middleware","Skeleton","Wrapper","Card","children","sagaMiddleware","createMiddleware","rootReducer","store","routerMiddleware","REACT_APP_TARGET_ENV","process","createStore","applyMiddleware","run","sagas","Component","path","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.449f9c0c.chunk.js","sourcesContent":["import { createStore, applyMiddleware, compose } from \"redux\";\n\nconst composeEnhancers =\n  typeof window !== \"undefined\" &&\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ &&\n  process.env.NODE_ENV !== \"production\"\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    : compose;\n\nexport default function configureStore(reducer, middleware) {\n  console.log({ REACT_APP_TARGET_ENV: process.env.REACT_APP_TARGET_ENV });\n  const store = createStore(\n    reducer,\n    {},\n    composeEnhancers(applyMiddleware(...middleware))\n  );\n  return store;\n}\n","import { createBrowserHistory } from \"history\";\n\nexport default createBrowserHistory();\n","import { IS_LOADING } from \"../../constants/actions\";\nimport { LoadingAction } from \"../../types/actions\";\n\nconst initialState: Array<string> = [];\n\nexport default (state = initialState, action: LoadingAction) => {\n  const { type } = action;\n  let id: string, status: boolean, index: number;\n  switch (type) {\n    case IS_LOADING:\n      id = action.id;\n      status = action.status;\n      index = state.findIndex(taskId => taskId === id);\n      if (status) {\n        return [...state, id];\n      } else if (index !== -1) {\n        return [...state.slice(0, index), ...state.slice(index + 1)];\n      }\n      break;\n\n    default:\n      return state;\n  }\n};\n","export const IS_LOADING             = \"IS_LOADING\";\nexport const LOGOUT                 = \"LOGOUT\";\nexport const SAVE_TODO              = \"SAVE_TODO\";\nexport const SAVE_TODO_OK           = \"SAVE_TODO_OK\";\nexport const SAVE_TODO_ERR          = \"SAVE_TODO_ERR\";\nexport const GET_TODO               = \"GET_TODO\";\nexport const GET_TODO_OK            = \"GET_TODO_OK\";\nexport const GET_TODO_ERR           = \"GET_TODO_ERR\";\nexport const UPDATE_TODO            = \"UPDATE_TODO\";\nexport const UPDATE_TODO_OK         = \"UPDATE_TODO_OK\";\nexport const UPDATE_TODO_ERR        = \"UPDATE_TODO_ERR\";\nexport const DEL_TODO               = \"DEL_TODO\";\nexport const DEL_TODO_OK            = \"DEL_TODO_OK\";\nexport const DEL_TODO_ERR           = \"DEL_TODO_ERR\";\nexport const GET_TODOS              = \"GET_TODOS\";\nexport const GET_TODOS_OK           = \"GET_TODOS_OK\";\nexport const GET_TODOS_ERR          = \"GET_TODOS_ERR\";\n","import * as ACTIONS from \"../../constants/actions\";\nimport * as Types from \"../../types/actions\";\nimport Todo from \"../../types/todo\";\n\nconst initialState: Array<Todo> = [];\n\nexport default (state = initialState, action: any) => {\n  const { type } = action;\n\n  switch (type) {\n    case ACTIONS.GET_TODOS_OK:\n      return action.value;\n\n    case ACTIONS.SAVE_TODO_OK:\n      return [action.value, ...state];\n\n    case ACTIONS.UPDATE_TODO_OK: {\n      const value: Todo = action.value;\n      const index: number = state.findIndex(item => item.id === value.id);\n      if (index !== -1) {\n        return [\n          ...state.slice(0, index),\n          action.value,\n          ...state.slice(index + 1)\n        ];\n      }\n      break;\n    }\n\n    case ACTIONS.DEL_TODO_OK: {\n      const value: Todo = action.value;\n      const index: number = state.findIndex(item => item.id === value.id);\n      if (index !== -1) {\n        return [...state.slice(0, index), ...state.slice(index + 1)];\n      }\n      break;\n    }\n  }\n  return state;\n};\n","import { combineReducers } from \"redux\";\nimport { connectRouter } from \"connected-react-router\";\n\nimport loading from \"./loading\";\nimport todos from \"./todos\";\n\nfunction createRootReducer(history: any) {\n  return combineReducers({\n    router: connectRouter(history),\n    loading,\n    todos\n  });\n}\n\nexport default createRootReducer;\n","import * as ACTIONS from \"../../constants/actions\";\nimport * as Types from \"../../types/actions\";\nimport Todo from \"../../types/todo\";\n\nexport const setLoading = (\n  id: string,\n  status: boolean\n): Types.LoadingAction => ({\n  type: ACTIONS.IS_LOADING,\n  id,\n  status,\n});\n\nexport const saveTodo = (data: Todo): Types.SaveTodoAction => ({\n  type: ACTIONS.SAVE_TODO,\n  data,\n});\n\nexport const saveTodoSuccess = (todo: Todo): Types.SaveTodoSuccessAction => ({\n  type: ACTIONS.SAVE_TODO_OK,\n  value: todo,\n});\n\nexport const saveTodoFailure = (error: string): Types.FailureAction => ({\n  type: ACTIONS.SAVE_TODO_ERR,\n  error,\n});\n\nexport const getTodo = (id: string): Types.GetTodoAction => ({\n  type: ACTIONS.GET_TODO,\n  id,\n});\n\nexport const getTodoSuccess = (value: Todo): Types.GetTodoSuccessAction => ({\n  type: ACTIONS.GET_TODO_OK,\n  value,\n});\n\nexport const getTodoFailure = (error: string): Types.FailureAction => ({\n  type: ACTIONS.GET_TODO_ERR,\n  error,\n});\n\nexport const updateTodo = (value: Todo): Types.UpdateTodoAction => ({\n  type: ACTIONS.UPDATE_TODO,\n  value,\n});\n\nexport const updateTodoSuccess = (\n  value: Todo\n): Types.UpdateTodoSuccessAction => ({\n  type: ACTIONS.UPDATE_TODO_OK,\n  value,\n});\n\nexport const updateTodoFailure = (error: string): Types.FailureAction => ({\n  type: ACTIONS.UPDATE_TODO_ERR,\n  error,\n});\n\nexport const deleteTodo = (id: string): Types.DeleteTodoAction => ({\n  type: ACTIONS.DEL_TODO,\n  id,\n});\n\nexport const deleteTodoSuccess = (\n  value: Todo\n): Types.DeleteTodoSuccessAction => ({\n  type: ACTIONS.DEL_TODO_OK,\n  value,\n});\n\nexport const deleteTodoFailure = (error: string): Types.FailureAction => ({\n  type: ACTIONS.DEL_TODO_ERR,\n  error,\n});\n\nexport const getTodos = () => ({\n  type: ACTIONS.GET_TODOS,\n});\n\nexport const getTodosSuccess = (\n  value: Todo[]\n): Types.GetTodosSuccessAction => ({\n  type: ACTIONS.GET_TODOS_OK,\n  value,\n});\n\nexport const getTodosFailure = (error: string): Types.FailureAction => ({\n  type: ACTIONS.GET_TODOS_ERR,\n  error,\n});\n","import AWS from \"aws-sdk\";\n\nAWS.config.region = \"us-east-1\";\nAWS.config.credentials = new AWS.CognitoIdentityCredentials({\n  IdentityPoolId: \"us-east-1:f81f99c1-ed34-43b9-aba0-4e7555152c05\",\n});\n\nexport default new AWS.Lambda();\n","import { takeEvery, put, call } from \"redux-saga/effects\";\n\nimport { IS_LOADING, DEL_TODO } from \"../../constants/actions\";\nimport { setLoading, deleteTodoSuccess, deleteTodoFailure } from \"../actions\";\nimport lambda from \"../utils/awsLambda\";\nimport API_ROOT from \"../../constants/apiRoot\";\nimport { DeleteTodoAction } from \"../../types/actions\";\n\nfunction invoke(data: string) {\n  return new Promise((resolve, reject) => {\n    lambda.invoke(\n      {\n        FunctionName: \"delete_todo\",\n        InvocationType: \"RequestResponse\",\n        LogType: \"None\",\n        Payload: data,\n      },\n      function(err: any, data: any) {\n        if (err) {\n          console.log({ err });\n          reject(err);\n        } else {\n          try {\n            const payload = JSON.parse(data.Payload);\n            resolve(payload);\n          } catch (ex) {\n            reject(ex);\n          }\n        }\n      }\n    );\n  });\n}\n\nfunction* deleteTodo(action: DeleteTodoAction) {\n  const { id } = action;\n  yield put(setLoading(DEL_TODO, true));\n  try {\n    const response: any = yield call(invoke, JSON.stringify({ id }));\n    yield put(deleteTodoSuccess(response));\n  } catch (ex) {\n    console.log(ex);\n    yield put(deleteTodoFailure(ex.text));\n  }\n  yield put(setLoading(DEL_TODO, false));\n}\n\nexport default function*() {\n  yield takeEvery(DEL_TODO, deleteTodo);\n}\n","import { takeEvery, put, call } from \"redux-saga/effects\";\n\nimport { IS_LOADING, GET_TODOS } from \"../../constants/actions\";\nimport { setLoading, getTodosSuccess, getTodosFailure } from \"../actions\";\nimport lambda from \"../utils/awsLambda\";\nimport API_ROOT from \"../../constants/apiRoot\";\nimport { GetTodosAction } from \"../../types/actions\";\n\nfunction invoke() {\n  return new Promise((resolve, reject) => {\n    lambda.invoke(\n      {\n        FunctionName: \"get_todos\",\n        InvocationType: \"RequestResponse\",\n        LogType: \"None\"\n      },\n      function(err: any, data: any) {\n        if (err) {\n          console.log({ err });\n          reject(err);\n        } else {\n          try {\n            const payload = JSON.parse(data.Payload);\n            resolve(payload.Items);\n          } catch(ex) {\n            reject(ex);\n          }\n        }\n      }\n    );\n  });\n}\n\nfunction* getTodos(action: GetTodosAction) {\n  yield put(setLoading(GET_TODOS, true));\n  try {\n    const response: any = yield call(invoke);\n    yield put(getTodosSuccess(response));\n  } catch (ex) {\n    console.log(ex);\n    yield put(getTodosFailure(ex.text));\n  }\n  yield put(setLoading(GET_TODOS, false));\n}\n\nexport default function*() {\n  yield takeEvery(GET_TODOS, getTodos);\n}\n","import { takeEvery, put, call } from \"redux-saga/effects\";\n\nimport { IS_LOADING, SAVE_TODO } from \"../../constants/actions\";\nimport { setLoading, saveTodoSuccess, saveTodoFailure } from \"../actions\";\nimport lambda from \"../utils/awsLambda\";\nimport { SaveTodoAction } from \"../../types/actions\";\n\nfunction invoke(data: string) {\n  return new Promise((resolve, reject) => {\n    lambda.invoke(\n      {\n        FunctionName: \"create_todo\",\n        InvocationType: \"RequestResponse\",\n        LogType: \"None\",\n        Payload: data,\n      },\n      function(err: any, data: any) {\n        if (err) {\n          console.log({ err });\n          reject(err);\n        } else {\n          try {\n            const payload = JSON.parse(data.Payload);\n            resolve(payload);\n          } catch (ex) {\n            reject(ex);\n          }\n        }\n      }\n    );\n  });\n}\n\nfunction* saveTodo(action: SaveTodoAction) {\n  const { data } = action;\n  yield put(setLoading(SAVE_TODO, true));\n  try {\n    const response: any = yield call(invoke, JSON.stringify(data));\n    yield put(saveTodoSuccess(response));\n  } catch (ex) {\n    console.log(ex);\n    yield put(saveTodoFailure(ex.text));\n  }\n  yield put(setLoading(SAVE_TODO, false));\n}\n\nexport default function*() {\n  yield takeEvery(SAVE_TODO, saveTodo);\n}\n","import { takeEvery, put, call } from \"redux-saga/effects\";\n\nimport { IS_LOADING, UPDATE_TODO } from \"../../constants/actions\";\nimport { setLoading, updateTodoSuccess, updateTodoFailure } from \"../actions\";\nimport lambda from \"../utils/awsLambda\";\nimport { UpdateTodoAction } from \"../../types/actions\";\n\nfunction invoke(data: string) {\n  return new Promise((resolve, reject) => {\n    lambda.invoke(\n      {\n        FunctionName: \"create_todo\",\n        InvocationType: \"RequestResponse\",\n        LogType: \"None\",\n        Payload: data,\n      },\n      function(err: any, data: any) {\n        if (err) {\n          console.log({ err });\n          reject(err);\n        } else {\n          try {\n            const payload = JSON.parse(data.Payload);\n            resolve(payload);\n          } catch (ex) {\n            reject(ex);\n          }\n        }\n      }\n    );\n  });\n}\n\nfunction* updateTodo(action: UpdateTodoAction) {\n  const { value } = action;\n  yield put(setLoading(UPDATE_TODO, true));\n  try {\n    yield call(invoke, JSON.stringify(value));\n    yield put(updateTodoSuccess(value));\n  } catch (ex) {\n    console.log(ex);\n    yield put(updateTodoFailure(ex.text));\n  }\n  yield put(setLoading(UPDATE_TODO, false));\n}\n\nexport default function*() {\n  yield takeEvery(UPDATE_TODO, updateTodo);\n}\n","import { all } from \"redux-saga/effects\";\n\nimport deleteTodo from \"./deleteTodo\";\nimport getTodos from \"./getTodos\";\nimport saveTodo from \"./saveTodo\";\nimport updateTodo from \"./updateTodo\";\n\nexport default function*() {\n  yield all([deleteTodo(), getTodos(), saveTodo(), updateTodo()]);\n}\n","import React, { FunctionComponent, useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport * as actions from \"../actions/index\";\nimport Todo from \"../../types/todo\";\nimport { getTodos } from \"../selectors\";\nimport logo from \"../images/logo.svg\";\nimport \"./App.css\";\n\ninterface CreateTodoProps {}\n\nconst CreateTodo: FunctionComponent<CreateTodoProps> = () => {\n  const [name, setName] = useState(\"\");\n  const dispatch = useDispatch();\n  // handlers\n  const changeName = (ev: React.FormEvent<EventTarget>) => {\n    const target = ev.target as HTMLInputElement;\n    setName(target.value);\n  };\n  const createTodo = () => {\n    if (name) {\n      dispatch(actions.saveTodo({ name, completed: false }));\n      setName(\"\");\n    }\n  };\n  const onSubmit = (ev: React.FormEvent<EventTarget>) => {\n    ev.preventDefault();\n    createTodo();\n    return false;\n  };\n  // render\n  return (\n    <Form onSubmit={onSubmit}>\n      <TextBox\n        type=\"text\"\n        onChange={changeName}\n        value={name}\n        placeholder=\"What's next?\"\n      />\n      <AddButton onClick={createTodo}>\n        <i className=\"fa fa-plus\" />\n      </AddButton>\n    </Form>\n  );\n};\n\nconst Form = styled.form`\n  align-items: center;\n  display: flex;\n  margin-bottom: 2.5rem;\n`;\nconst TextBox = styled.input`\n  background: #e2e2e2;\n  border: none;\n  border-radius: 4px;\n  box-shadow: inset 8px 8px 16px #d7d7d7, inset -8px -8px 16px #ededed;\n  flex: 1;\n  font-size: 1.25rem;\n  padding: 1rem;\n  @media all and (min-width: 768px) {\n    font-size: 1.5rem;\n    padding: 2rem;\n  }\n`;\nconst AddButton = styled.button`\n  align-items: center;\n  background: #e2e2e2;\n  border: none;\n  border-radius: 50%;\n  box-shadow:  6px 6px 12px #d7d7d7,\n               -6px -6px 12px #ededed;\n  color: #17ab26;\n  display: flex;\n  font-size: 1.25rem;\n  justify-content: center;\n  height: 3rem;\n  margin-left: 1rem;\n  width: 3rem;\n  transition: background-color 0.2s, color 0.2s;\n\n  @media all and (min-width: 780px) {\n    height: 4rem;\n    width: 4rem;\n  }\n  &:active,\n  &:target {\n    background: #17ab26;\n    color: #e3e3e3;\n  }\n`;\n\nexport default CreateTodo;\n","import { createSelector } from \"reselect\";\nimport { RootState } from \"../../types/rootState\";\nimport Todo from \"../../types/todo\";\n\nexport const isLoading = (state: RootState): boolean =>\n  Boolean(state.loading.length);\nexport const getTodos = (state: RootState): Todo[] => state.todos;\n","import React, { FunctionComponent, useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport * as actions from \"../actions/index\";\nimport Todo from \"../../types/todo\";\nimport { getTodos } from \"../selectors\";\n\ninterface TodoListProps {}\n\ninterface CheckboxProps {\n  completed: boolean;\n  onClick?: any;\n}\n\nconst TodoList: FunctionComponent<TodoListProps> = () => {\n  const dispatch = useDispatch();\n  const todos: Todo[] = useSelector(getTodos);\n  useEffect(() => {\n    dispatch(actions.getTodos());\n  }, []);\n  // handlers\n  const changeCompleted = (item: Todo) => () => {\n    dispatch(\n      actions.updateTodo({\n        ...item,\n        completed: !item.completed\n      })\n    );\n  };\n  const deleteTodo = (item: Todo) => () => {\n    dispatch(actions.deleteTodo(item.id!));\n  };\n  // render\n  return (\n    <List>\n      {todos.map(item => (\n        <Item key={item.id}>\n          <Checkbox completed={item.completed} onClick={changeCompleted(item)}>\n            {!item.completed || <i className=\"fa fa-check\" />}\n          </Checkbox>\n          <ItemName onClick={changeCompleted(item)}>{item.name}</ItemName>\n          <ItemActions>\n            <DeleteButton onClick={deleteTodo(item)}>\n              <i className=\"fa fa-times\" />\n            </DeleteButton>\n          </ItemActions>\n        </Item>\n      ))}\n    </List>\n  );\n};\n\nconst List = styled.ul`\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n`;\nconst Item = styled.li`\n  align-items: center;\n  display: flex;\n  padding: 1rem 0;\n  @media all and (min-width: 780px) {\n    padding: 1rem 0.5rem 1rem 0;\n  }\n  & + & {\n    border-top: solid 1px #eaeaea;\n  }\n`;\nconst Checkbox = styled.label<CheckboxProps>`\n  align-items: center;\n  background: #e2e2e2;\n  border-radius: 4px;\n  box-shadow: inset 6px 6px 12px #d7d7d7, inset -6px -6px 12px #ededed;\n  display: flex;\n  height: 2rem;\n  justify-content: center;\n  margin-right: 1rem;\n  width: 2rem;\n\n  ${props =>\n    props.completed\n      ? `\n      background-color: #17ab26;\n      box-shadow: inset 6px 6px 12px #16a224,\n            inset -6px -6px 12px #18b428;\n      color: #fff;\n    `\n      : ``}\n\n  input[type=\"checkbox\"] {\n    display: none;\n  }\n`;\nconst ItemName = styled.div`\n  flex: 5;\n`;\nconst ItemActions = styled.div`\n  display: flex;\n  flex: 1;\n  justify-content: flex-end;\n`;\nconst DeleteButton = styled.button`\n  align-items: center;\n  background: #e2e2e2;\n  border: none;\n  border-radius: 50%;\n  box-shadow: 6px 6px 12px #d7d7d7, -6px -6px 12px #ededed;\n  color: #982929;\n  display: flex;\n  font-size: 1.25rem;\n  justify-content: center;\n  height: 3rem;\n  width: 3rem;\n  transition: background-color 0.2s, color 0.2s;\n\n  &:active,\n  &:target {\n    background: #982929;\n    color: #e3e3e3;\n  }\n`;\n\nexport default TodoList;\n","import React, { FunctionComponent, useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { ConnectedRouter } from \"connected-react-router\";\nimport styled from \"styled-components\";\n\nimport history from \"../utils/history\";\nimport Todo from \"../../types/todo\";\nimport { getTodos } from \"../selectors\";\nimport CreateTodo from \"./CreateTodo\";\nimport TodoList from \"./TodoList\";\n\nimport \"./App.css\";\n\ninterface AppProps {\n  children: any;\n}\n\nconst Skeleton: FunctionComponent<AppProps> = (props: AppProps) => {\n  return (\n    <Wrapper>\n      <Card>{props.children}</Card>\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  min-height: 100vh;\n  @media all and (min-width: 780px) {\n    padding: 2rem;\n  }\n`;\nconst Card = styled.div`\n  padding: 2rem 1rem;\n  width: 100vw;\n  @media all and (min-width: 780px) {\n    background: #e2e2e2;\n    border-radius: 16px;\n    box-shadow: 20px 20px 60px #c0c0c0, -20px -20px 60px #ffffff;\n    max-width: 60rem;\n    padding: 2rem;\n    width: 80vw;\n  }\n`;\n\n// Routes\nexport default () => (\n  <ConnectedRouter history={history}>\n    <Switch>\n      <Route path=\"/\" exact>\n        <Skeleton>\n          <CreateTodo />\n          <TodoList />\n        </Skeleton>\n      </Route>\n    </Switch>\n  </ConnectedRouter>\n);\n","import React, { FunctionComponent } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport createMiddleware from \"redux-saga\";\nimport { routerMiddleware } from \"connected-react-router\";\n\n// import * as serviceWorker from './serviceWorker';\nimport configureStore from \"./store\"; // eslint-disable-line import/default\nimport history from \"./utils/history\";\nimport createRootReducer from \"./reducers\";\nimport sagas from \"./sagas\";\nimport App from \"./components/App\";\n\nimport \"./css/index.css\";\n\nconst sagaMiddleware = createMiddleware();\nconst rootReducer = createRootReducer(history);\nconst store = configureStore(rootReducer, [\n  sagaMiddleware,\n  routerMiddleware(history)\n]);\nsagaMiddleware.run(sagas);\n\nconst render = (Component: FunctionComponent) =>\n  ReactDOM.render(\n    <Provider store={store}>\n      <Component />\n    </Provider>,\n    document.getElementById(\"root\")\n  );\n\nrender(App);\n\n// if (module.hot) {\n//   module.hot.accept('./routes', () => {\n//     const NextApp = require('./routes').default;\n//     render(NextApp);\n//   });\n// }\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}